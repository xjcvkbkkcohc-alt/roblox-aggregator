import os
import requests
import threading
import time
import logging
import sys 
from flask import Flask, request, jsonify

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å Render
)

app = Flask(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
server_data = {}
data_lock = threading.Lock() 
AGGREGATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
STALE_THRESHOLD = 600   # 10 –º–∏–Ω—É—Ç

# <--- –£–î–ê–õ–ï–ù–û ---
# –§—É–Ω–∫—Ü–∏—è keep_alive() –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞
# --- ---

def aggregate_and_post_stats():
    """
    –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Discord.
    """
    
    # --- !! –ò–ó–ú–ï–ù–ï–ù–ò–ï !! ---
    #
    # –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–Æ –†–ï–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£ –ù–ê –í–ï–ë–•–£–ö
    #
    WEBHOOK_URL = "https://discord.com/api/webhooks/1429005345841483776/rxdR0M7CPVXjSE1H4Zw8KvuJ9BIoL85vRRr0bwRVkJ5AL96li0ku2q21xwZOTEXmksju"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—ã –≤—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é —Å—Å—ã–ª–∫—É
    if "https://discord.com/api/webhooks/1429005345841483776/rxdR0M7CPVXjSE1H4Zw8KvuJ9BIoL85vRRr0bwRVkJ5AL96li0ku2q21xwZOTEXmksju" in WEBHOOK_URL:
        logging.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢—ã –Ω–µ –≤—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é —Å—Å—ã–ª–∫—É –≤ app.py!")
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢—ã –Ω–µ –≤—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é —Å—Å—ã–ª–∫—É –≤ app.py!")
        return # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
        
    logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω. URL –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.")
    print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω. URL –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.")
    #
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏—è ---


    while True:
        logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–∞—á–∏–Ω–∞—é –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        print("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–∞—á–∏–Ω–∞—é –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        total_players = 0
        total_games = 0
        highest_player_count = 0
        active_servers_count = 0
        
        universes_to_remove = []
        current_time = time.time()

        try:
            with data_lock:
                total_games = len(server_data)
                
                for universe_id, jobs in server_data.items():
                    jobs_to_remove = []
                    for job_id, data in jobs.items():
                        if (current_time - data['timestamp']) > STALE_THRESHOLD:
                            jobs_to_remove.append(job_id)
                        else:
                            player_count = data.get('count', 0)
                            total_players += player_count
                            active_servers_count += 1
                            if player_count > highest_player_count:
                                highest_player_count = player_count
                    
                    for job_id in jobs_to_remove:
                        del server_data[universe_id][job_id]
                
                    if not server_data[universe_id]:
                        universes_to_remove.append(universe_id)

                for universe_id in universes_to_remove:
                    del server_data[universe_id]

            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Discord ---
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä
            if active_servers_count > 0:
                logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞: –ò–≥—Ä={total_games}, –ò–≥—Ä–æ–∫–æ–≤={total_players}, –ú–∞–∫—Å.={highest_player_count}")
                print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞: –ò–≥—Ä={total_games}, –ò–≥—Ä–æ–∫–æ–≤={total_players}, –ú–∞–∫—Å.={highest_player_count}")

                payload = {
                    "embeds": [{
                        "title": "üìä Game Statistics",
                        "color": 11290873, 
                        "fields": [
                            {"name": "Total Games", "value": f"**{total_games}**", "inline": True},
                            {"name": "Total Players", "value": f"**{total_players}**", "inline": True},
                            {"name": "Highest Player Count", "value": f"**{highest_player_count}**", "inline": True}
                        ],
                        "footer": { "text": "Obsidian Serverside" },
                        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
                    }]
                }
                requests.post(WEBHOOK_URL, json=payload, timeout=10)
            
            else:
                logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                print("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")


        except Exception as e:
            logging.error(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        # –°–µ—Ä–≤–µ—Ä –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ó–∞—Å—ã–ø–∞—é –Ω–∞ {AGGREGATE_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ó–∞—Å—ã–ø–∞—é –Ω–∞ {AGGREGATE_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        time.sleep(AGGREGATE_INTERVAL) 


@app.route('/')
def home():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤."""
    return "Obsidian Aggregator Service is running!", 200

@app.route('/heartbeat', methods=['POST'])
def handle_heartbeat():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç "–ø—É–ª—å—Å" –æ—Ç –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ Roblox.
    """
    try:
        data = request.json
        universe_id = data.get('universeId')
        job_id = data.get('jobId')
        player_count = data.get('playerCount')

        if not all([universe_id, job_id, player_count is not None]):
            logging.warning(f"Heartbeat: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            return jsonify({"error": "Missing data"}), 400

        current_time = time.time()

        with data_lock:
            if universe_id not in server_data:
                server_data[universe_id] = {}
            server_data[universe_id][job_id] = {
                "count": int(player_count),
                "timestamp": current_time
            }
        
        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.error(f"Heartbeat: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == '__main__':
    # <--- –£–î–ê–õ–ï–ù–û ---
    # –ü–æ—Ç–æ–∫ keep_alive() –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
    # threading.Thread(target=keep_alive, daemon=True).start()
    # --- ---
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    threading.Thread(target=aggregate_and_post_stats, daemon=True).start()
    
    # –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (PORT) –Ω—É–∂–Ω–∞ —Å–∞–º–æ–º—É Render, –µ–µ —É–±–∏—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
