import os
import requests
import threading
import time
import logging
from flask import Flask, request, jsonify

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
app = Flask(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
# server_data = {
#    'universe_id_1': {
#        'job_id_1': {'count': 10, 'timestamp': 12345},
#        'job_id_2': {'count': 12, 'timestamp': 12346}
#    },
#    'universe_id_2': {
#        'job_id_3': {'count': 5, 'timestamp': 12347}
#    }
# }
server_data = {}
data_lock = threading.Lock() # –ó–∞–º–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ---
# –ö–∞–∫ —á–∞—Å—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –≤ Discord (5 –º–∏–Ω—É—Ç)
AGGREGATE_INTERVAL = 300 
# –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å—á–∏—Ç–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä "–º–µ—Ä—Ç–≤—ã–º" (10 –º–∏–Ω—É—Ç)
STALE_THRESHOLD = 600 

def keep_alive():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ —Å–∞–º–æ–º—É —Å–µ–±–µ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ "–∑–∞—Å—ã–ø–∞–ª"."""
    while True:
        # –ü–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç
        time.sleep(600)  
        try:
            render_app_url = os.environ.get('RENDER_EXTERNAL_URL')
            if render_app_url:
                logging.info("Keep-alive: –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏–Ω–≥...")
                # –¢–∞–π–º-–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥
                requests.get(render_app_url, timeout=15)
        except requests.RequestException as e:
            logging.error(f"Keep-alive: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥: {e}")

def aggregate_and_post_stats():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Discord.
    """
    # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Render
    WEBHOOK_URL = os.environ.get('AGGREGATE_WEBHOOK_URL')
    if not WEBHOOK_URL:
        logging.critical("AGGREGATE_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
        return

    while True:
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–¥—Å—á–µ—Ç–æ–º
        time.sleep(AGGREGATE_INTERVAL)
        
        logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–∞—á–∏–Ω–∞—é –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        total_players = 0
        total_games = 0
        highest_player_count = 0
        active_servers_count = 0
        
        universes_to_remove = []
        current_time = time.time()

        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Ö –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å
            with data_lock:
                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã (Universe ID)
                total_games = len(server_data)
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ (universe)
                for universe_id, jobs in server_data.items():
                    jobs_to_remove = []
                    
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É (job) –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
                    for job_id, data in jobs.items():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "—É–º–µ—Ä" –ª–∏ —Å–µ—Ä–≤–µ—Ä
                        if (current_time - data['timestamp']) > STALE_THRESHOLD:
                            jobs_to_remove.append(job_id)
                        else:
                            # –°–µ—Ä–≤–µ—Ä –∂–∏–≤–æ–π, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ
                            player_count = data.get('count', 0)
                            total_players += player_count
                            active_servers_count += 1
                            
                            # –ò—â–µ–º —Å–∞–º—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
                            if player_count > highest_player_count:
                                highest_player_count = player_count
                    
                    # –£–¥–∞–ª—è–µ–º "–º–µ—Ä—Ç–≤—ã–µ" —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ —ç—Ç–æ–π –∏–≥—Ä—ã
                    for job_id in jobs_to_remove:
                        del server_data[universe_id][job_id]
                        logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –£–¥–∞–ª–µ–Ω –º–µ—Ä—Ç–≤—ã–π —Å–µ—Ä–≤–µ—Ä {job_id} –∏–∑ –∏–≥—Ä—ã {universe_id}")
                
                    # –ï—Å–ª–∏ –≤ –∏–≥—Ä–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–º–µ—á–∞–µ–º –∏–≥—Ä—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                    if not server_data[universe_id]:
                        universes_to_remove.append(universe_id)

                # –£–¥–∞–ª—è–µ–º "–º–µ—Ä—Ç–≤—ã–µ" –∏–≥—Ä—ã
                for universe_id in universes_to_remove:
                    del server_data[universe_id]
                    logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –£–¥–∞–ª–µ–Ω–∞ –º–µ—Ä—Ç–≤–∞—è –∏–≥—Ä–∞ {universe_id}")

            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Discord ---
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫
            if active_servers_count > 0:
                logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞: –ò–≥—Ä={total_games}, –ò–≥—Ä–æ–∫–æ–≤={total_players}, –ú–∞–∫—Å.={highest_player_count}")

                # –°–æ–±–∏—Ä–∞–µ–º —ç–º–±–µ–¥, –∫–∞–∫ –Ω–∞ —Ç–≤–æ–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
                payload = {
                    "embeds": [{
                        "title": "üìä Game Statistics",
                        "color": 11290873, # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (–∫–∞–∫ –≤ —Ç–≤–æ–µ–º —Å—Ç–∞—Ä–æ–º –ª–æ–≥–≥–µ—Ä–µ)
                        "fields": [
                            {
                                "name": "Total Games",
                                "value": f"**{total_games}**",
                                "inline": True
                            },
                            {
                                "name": "Total Players",
                                "value": f"**{total_players}**",
                                "inline": True
                            },
                            {
                                "name": "Highest Player Count",
                                "value": f"**{highest_player_count}**",
                                "inline": True
                            }
                        ],
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º "Obsidian Serverside" –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª
                        "footer": { "text": "Obsidian Serverside" },
                        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
                    }]
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
                requests.post(WEBHOOK_URL, json=payload, timeout=10)
            
            else:
                logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

        except Exception as e:
            logging.error(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)


@app.route('/')
def home():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è keep-alive –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    return "Obsidian Aggregator Service is running!", 200

@app.route('/heartbeat', methods=['POST'])
def handle_heartbeat():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç "–ø—É–ª—å—Å" –æ—Ç –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ Roblox.
    """
    try:
        data = request.json
        universe_id = data.get('universeId')
        job_id = data.get('jobId')
        player_count = data.get('playerCount')

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not all([universe_id, job_id, player_count is not None]):
            logging.warning(f"Heartbeat: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            return jsonify({"error": "Missing data"}), 400

        current_time = time.time()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        with data_lock:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–µ –∑–∞–ø–∏—Å—å
            if universe_id not in server_data:
                server_data[universe_id] = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            server_data[universe_id][job_id] = {
                "count": int(player_count),
                "timestamp": current_time
            }
        
        # logging.info(f"Heartbeat: –ü–æ–ª—É—á–µ–Ω –æ—Ç {job_id} (–ò–≥—Ä–∞: {universe_id}), –∏–≥—Ä–æ–∫–∏: {player_count}")
        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.error(f"Heartbeat: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ keep-alive
    threading.Thread(target=keep_alive, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    threading.Thread(target=aggregate_and_post_stats, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
