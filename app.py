import os
import requests
import threading
import time
import logging
import sys # <--- –î–û–ë–ê–í–õ–ï–ù–û
from flask import Flask, request, jsonify

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –î–û–ë–ê–í–õ–ï–ù–û 'stream=sys.stdout', —á—Ç–æ–±—ã –ª–æ–≥–∏ 100% —à–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª—å Render
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)

app = Flask(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
server_data = {}
data_lock = threading.Lock() 

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
AGGREGATE_INTERVAL = 300 
STALE_THRESHOLD = 600 

def keep_alive():
    while True:
        time.sleep(600)  
        try:
            render_app_url = os.environ.get('RENDER_EXTERNAL_URL')
            if render_app_url:
                logging.info("Keep-alive: –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏–Ω–≥...")
                print("Keep-alive: –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏–Ω–≥...") # <--- –î–û–ë–ê–í–õ–ï–ù–û
                requests.get(render_app_url, timeout=15)
        except requests.RequestException as e:
            logging.error(f"Keep-alive: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥: {e}")
            print(f"Keep-alive: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥: {e}") # <--- –î–û–ë–ê–í–õ–ï–ù–û

def aggregate_and_post_stats():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Discord.
    """
    WEBHOOK_URL = os.environ.get('AGGREGATE_WEBHOOK_URL')
    if not WEBHOOK_URL:
        # –≠–¢–û –í–ê–ñ–ù–û!
        logging.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 'AGGREGATE_WEBHOOK_URL' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü–æ—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 'AGGREGATE_WEBHOOK_URL' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü–æ—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
        return # <-- –ü–æ—Ç–æ–∫ —É–º–∏—Ä–∞–µ—Ç –∑–¥–µ—Å—å, –µ—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω

    logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞... (URL –≤–µ–±—Ö—É–∫–∞ –Ω–∞–π–¥–µ–Ω)")
    print("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞... (URL –≤–µ–±—Ö—É–∫–∞ –Ω–∞–π–¥–µ–Ω)")

    while True:
        # --- –õ–û–ì–ò–ö–ê –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –°–ù–ê–ß–ê–õ–ê ---
        logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–∞—á–∏–Ω–∞—é –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        print("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–∞—á–∏–Ω–∞—é –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        total_players = 0
        total_games = 0
        highest_player_count = 0
        active_servers_count = 0
        
        universes_to_remove = []
        current_time = time.time()

        try:
            with data_lock:
                total_games = len(server_data)
                
                for universe_id, jobs in server_data.items():
                    jobs_to_remove = []
                    for job_id, data in jobs.items():
                        if (current_time - data['timestamp']) > STALE_THRESHOLD:
                            jobs_to_remove.append(job_id)
                        else:
                            player_count = data.get('count', 0)
                            total_players += player_count
                            active_servers_count += 1
                            if player_count > highest_player_count:
                                highest_player_count = player_count
                    
                    for job_id in jobs_to_remove:
                        del server_data[universe_id][job_id]
                        logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –£–¥–∞–ª–µ–Ω –º–µ—Ä—Ç–≤—ã–π —Å–µ—Ä–≤–µ—Ä {job_id}")
                
                    if not server_data[universe_id]:
                        universes_to_remove.append(universe_id)

                for universe_id in universes_to_remove:
                    del server_data[universe_id]
                    logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –£–¥–∞–ª–µ–Ω–∞ –º–µ—Ä—Ç–≤–∞—è –∏–≥—Ä–∞ {universe_id}")

            # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Discord ---
            if active_servers_count > 0:
                logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞: –ò–≥—Ä={total_games}, –ò–≥—Ä–æ–∫–æ–≤={total_players}, –ú–∞–∫—Å.={highest_player_count}")
                print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞: –ò–≥—Ä={total_games}, –ò–≥—Ä–æ–∫–æ–≤={total_players}, –ú–∞–∫—Å.={highest_player_count}")

                payload = {
                    "embeds": [{
                        "title": "üìä Game Statistics",
                        "color": 11290873, 
                        "fields": [
                            {"name": "Total Games", "value": f"**{total_games}**", "inline": True},
                            {"name": "Total Players", "value": f"**{total_players}**", "inline": True},
                            {"name": "Highest Player Count", "value": f"**{highest_player_count}**", "inline": True}
                        ],
                        "footer": { "text": "Obsidian Serverside" },
                        "timestamp": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
                    }]
                }
                requests.post(WEBHOOK_URL, json=payload, timeout=10)
            
            else:
                logging.info("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                print("–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

        except Exception as e:
            logging.error(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        # --- –¢–ï–ü–ï–†–¨ –°–ï–†–í–ï–† –ó–ê–°–´–ü–ê–ï–¢ ---
        # time.sleep() –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –ò–ó –ù–ê–ß–ê–õ–ê –≤ –ö–û–ù–ï–¶ —Ü–∏–∫–ª–∞
        logging.info(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ó–∞—Å—ã–ø–∞—é –Ω–∞ {AGGREGATE_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        print(f"–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä: –ó–∞—Å—ã–ø–∞—é –Ω–∞ {AGGREGATE_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        time.sleep(AGGREGATE_INTERVAL) 


@app.route('/')
def home():
    return "Obsidian Aggregator Service is running!", 200

@app.route('/heartbeat', methods=['POST'])
def handle_heartbeat():
    try:
        data = request.json
        universe_id = data.get('universeId')
        job_id = data.get('jobId')
        player_count = data.get('playerCount')

        if not all([universe_id, job_id, player_count is not None]):
            logging.warning(f"Heartbeat: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            return jsonify({"error": "Missing data"}), 400

        current_time = time.time()

        with data_lock:
            if universe_id not in server_data:
                server_data[universe_id] = {}
            
            server_data[universe_id][job_id] = {
                "count": int(player_count),
                "timestamp": current_time
            }
        
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –ö–ê–ñ–î–´–ô –ø–∏–Ω–≥ –≤ –ª–æ–≥–∞—Ö (–±—É–¥–µ—Ç —Å–ø–∞–º)
        # logging.info(f"Heartbeat: –ü–∏–Ω–≥ –æ—Ç {job_id}, –∏–≥—Ä–æ–∫–∏: {player_count}")
        
        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.error(f"Heartbeat: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if __name__ == '__main__':
    threading.Thread(target=keep_alive, daemon=True).start()
    threading.Thread(target=aggregate_and_post_stats, daemon=True).start()
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
